{"version":3,"sources":["app_component/form.component.js","app_component/weather.component.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","Weather","city","weathericon","celsius","min","max","minmax","temp_min","temp_max","desc","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","setState","sys","calcCelsius","main","temp","weather","description","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c1cc6147.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./form.style.css\";\r\nexport const Form = props=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\"name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input type=\"text\" className=\"form-control\"name=\"country\" autoComplete=\"off\"placeholder=\"Country\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 pt-4 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction error(){\r\n    return (\r\n            <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n                Please Enter City and Country\r\n            </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n//import './weather.style.css'\r\n//{(typeof Weather.celsius!=\"undefined\") ? ((Weather.celsius>16) ? 'container':'container cool'):'container '}\r\nexport const Weather = (props)=>{\r\n    return (\r\n        <div className=\"container\">\r\n       <div className=\"cards pt-4\">\r\n           <h1>{props.city}</h1>\r\n           <h5 className=\"py-4\">\r\n               <i className={`wi ${props.weathericon} display-1`}></i>\r\n           </h5>\r\n            {props.celsius?(<h1 className=\"py-2\">{props.celsius}&deg;</h1>):null}\r\n           {minmax(props.temp_min,props.temp_max)}\r\n           <h4 className=\"py-3\">{props.desc}</h4>\r\n       </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nfunction minmax(min,max){\r\n        if(min&&max){\r\n            return(\r\n                <h3>\r\n                    <span className=\"px-4\">{min}&deg;</span>\r\n                    <span className=\"px-4\">{max}&deg;</span>\r\n                </h3>\r\n            );\r\n        }\r\n   \r\n}\r\n","import React,{Component} from 'react';\nimport \"weather-icons/css/weather-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport {Form} from './app_component/form.component.js'\nimport {Weather} from './app_component/weather.component.js';\n//api.openweathermap.org/data/2.5/weather?q=Mumbai\nconst api_key=\"37c70b216c90e0b74b3dd8a5bd96c2bd\";\n\nclass App extends Component{\n  constructor()\n  {\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      desc:\"\",\n      error:false\n    };\n\n    \n    this.weathericon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon:this.weathericon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon:this.weathericon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({icon:this.weathericon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon:this.weathericon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon:this.weathericon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon:this.weathericon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon:this.weathericon.Clouds });\n        break;\n      default:\n        this.setState({ icon:this.weathericon.Clouds });\n    }\n  }\n\n  getWeather=async(e)=>{\n\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    \n    if(city && country){\n      \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api_key}`);\n    const response = await api_call.json();\n    this.setState(\n      {\n        city:`${response.name},${response.sys.country}`,\n        celsius:this.calcCelsius(response.main.temp),\n        temp_max:this.calcCelsius(response.main.temp_max),\n        temp_min:this.calcCelsius(response.main.temp_min),\n        desc:response.weather[0].description,\n        error:false\n      }\n    )\n      \n    this.get_WeatherIcon(this.weathericon,response.weather[0].id);\n    }\n    else{\n      this.setState({error:true});\n    }\n  }\n  \n   calcCelsius(temp) {\n    temp=Math.floor(temp-273.15);\n    return temp;\n  }\n\n\n  render(){\n    return (  \n        <div className=\"App\">\n          <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather city={this.state.city} \n        country={this.state.country}\n        celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        desc={this.state.desc}\n        weathericon={this.state.icon}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}